"""Update Manage Products and Stock

Revision ID: 24ab033290b5
Revises: e0217de68882
Create Date: 2025-06-09 17:49:20.302069

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '24ab033290b5'
down_revision: Union[str, None] = 'e0217de68882'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_product_shipping_tasks_id'), table_name='product_shipping_tasks')
    op.drop_table('product_shipping_tasks')
    op.drop_index(op.f('ix_product_materials_id'), table_name='product_materials')
    op.drop_table('product_materials')
    op.drop_index(op.f('ix_batch_ingredient_usages_id'), table_name='batch_ingredient_usages')
    op.drop_table('batch_ingredient_usages')
    op.drop_index(op.f('ix_batch_safety_checks_id'), table_name='batch_safety_checks')
    op.drop_table('batch_safety_checks')
    op.drop_index(op.f('ix_standard_shipping_tasks_id'), table_name='standard_shipping_tasks')
    op.drop_table('standard_shipping_tasks')
    op.drop_index(op.f('ix_products_id'), table_name='products')
    op.drop_table('products')
    op.drop_index(op.f('ix_global_salaries_id'), table_name='global_salaries')
    op.drop_table('global_salaries')
    op.drop_index(op.f('ix_global_costs_id'), table_name='global_costs')
    op.drop_table('global_costs')
    op.drop_index(op.f('ix_product_production_tasks_id'), table_name='product_production_tasks')
    op.drop_table('product_production_tasks')
    op.drop_index(op.f('ix_batch_records_id'), table_name='batch_records')
    op.drop_table('batch_records')
    op.drop_index(op.f('ix_standard_production_tasks_id'), table_name='standard_production_tasks')
    op.drop_table('standard_production_tasks')
    op.drop_index(op.f('ix_production_runs_id'), table_name='production_runs')
    op.drop_table('production_runs')
    op.drop_table('production_run_components')
    op.add_column('stock_additions', sa.Column('supplier_id', sa.Integer(), nullable=True))
    op.add_column('stock_additions', sa.Column('notes', sa.String(), nullable=True))
    op.alter_column('stock_additions', 'cost_of_addition',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=False)
    op.create_foreign_key(None, 'stock_additions', 'suppliers', ['supplier_id'], ['id'])
    op.drop_column('stock_additions', 'supplier_info')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('stock_additions', sa.Column('supplier_info', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'stock_additions', type_='foreignkey')
    op.alter_column('stock_additions', 'cost_of_addition',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=True)
    op.drop_column('stock_additions', 'notes')
    op.drop_column('stock_additions', 'supplier_id')
    op.create_table('production_run_components',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('production_run_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ingredient_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity_deducted_grams', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('production_run_components_pkey'))
    )
    op.create_table('production_runs',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('production_runs_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('run_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('planned_batch_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='production_runs_product_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='production_runs_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='production_runs_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_production_runs_id'), 'production_runs', ['id'], unique=False)
    op.create_table('standard_production_tasks',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('standard_production_tasks_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='standard_production_tasks_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='standard_production_tasks_pkey'),
    sa.UniqueConstraint('user_id', 'task_name', name='uq_user_std_prod_task_name', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_standard_production_tasks_id'), 'standard_production_tasks', ['id'], unique=False)
    op.create_table('batch_records',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('batch_records_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('production_run_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('batch_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('person_responsible_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('manufacturing_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('cured_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('expiration_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('bars_in_batch', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('curing_time_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('manufacture_method', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('total_oil_weight_gr', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('water_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('superfat_percentage', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True),
    sa.Column('final_cured_weight_gr', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('qc_fragrance_strength', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('qc_discoloration', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('qc_trace_speed', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('qc_gel_phase', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('qc_irregularities', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('qc_ph_finished', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=True),
    sa.Column('qc_ph_cured', sa.NUMERIC(precision=4, scale=2), autoincrement=False, nullable=True),
    sa.Column('qc_final_quality_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('qc_packaging_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('qc_stability_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('qc_waste_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['person_responsible_id'], ['employees.id'], name='batch_records_person_responsible_id_fkey'),
    sa.ForeignKeyConstraint(['production_run_id'], ['production_runs.id'], name='batch_records_production_run_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='batch_records_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='batch_records_pkey'),
    sa.UniqueConstraint('batch_code', name='batch_records_batch_code_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_batch_records_id'), 'batch_records', ['id'], unique=False)
    op.create_table('product_production_tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('standard_task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('time_minutes', sa.NUMERIC(precision=10, scale=1), autoincrement=False, nullable=False),
    sa.Column('items_processed_in_task', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], name=op.f('product_production_tasks_employee_id_fkey')),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('product_production_tasks_product_id_fkey')),
    sa.ForeignKeyConstraint(['standard_task_id'], ['standard_production_tasks.id'], name=op.f('product_production_tasks_standard_task_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('product_production_tasks_pkey'))
    )
    op.create_index(op.f('ix_product_production_tasks_id'), 'product_production_tasks', ['id'], unique=False)
    op.create_table('global_costs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('monthly_rent', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('monthly_utilities', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('total_monthly_items_for_rent_utilities', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('global_costs_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('global_costs_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('global_costs_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_global_costs_id'), 'global_costs', ['id'], unique=False)
    op.create_table('global_salaries',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('monthly_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], name=op.f('global_salaries_employee_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('global_salaries_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('global_salaries_pkey')),
    sa.UniqueConstraint('user_id', 'employee_id', name=op.f('uq_user_employee_global_salary'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_global_salaries_id'), 'global_salaries', ['id'], unique=False)
    op.create_table('products',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('products_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('product_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('batch_size_items', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('monthly_production_items', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('packaging_label_cost', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True),
    sa.Column('packaging_material_cost', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=True),
    sa.Column('salary_allocation_employee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('salary_allocation_items_per_month', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('rent_utilities_allocation_items_per_month', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('retail_avg_order_value', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('retail_cc_fee_percent', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('retail_platform_fee_percent', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('retail_shipping_cost_paid_by_you', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('wholesale_avg_order_value', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('wholesale_commission_percent', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('wholesale_processing_fee_percent', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('wholesale_flat_fee_per_order', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('wholesale_price_per_item', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('retail_price_per_item', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('buffer_percentage', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('distribution_wholesale_percentage', sa.NUMERIC(precision=5, scale=4), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['salary_allocation_employee_id'], ['employees.id'], name='products_salary_allocation_employee_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='products_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='products_pkey'),
    sa.UniqueConstraint('user_id', 'product_name', name='uq_user_product_name', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_products_id'), 'products', ['id'], unique=False)
    op.create_table('standard_shipping_tasks',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('standard_shipping_tasks_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='standard_shipping_tasks_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='standard_shipping_tasks_pkey'),
    sa.UniqueConstraint('user_id', 'task_name', name='uq_user_std_ship_task_name', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_standard_shipping_tasks_id'), 'standard_shipping_tasks', ['id'], unique=False)
    op.create_table('batch_safety_checks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('batch_record_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('check_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('DONE', 'NOT_DONE', 'NOT_APPLICABLE', name='safety_check_status_enum'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['batch_record_id'], ['batch_records.id'], name=op.f('batch_safety_checks_batch_record_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('batch_safety_checks_pkey')),
    sa.UniqueConstraint('batch_record_id', 'check_name', name=op.f('uq_batch_safety_check'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_batch_safety_checks_id'), 'batch_safety_checks', ['id'], unique=False)
    op.create_table('batch_ingredient_usages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('batch_record_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ingredient_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('actual_weight_gr', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('ingredient_brand', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('supplier_lot_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('measured_by_initials', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['batch_record_id'], ['batch_records.id'], name=op.f('batch_ingredient_usages_batch_record_id_fkey')),
    sa.ForeignKeyConstraint(['ingredient_id'], ['ingredients.id'], name=op.f('batch_ingredient_usages_ingredient_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('batch_ingredient_usages_pkey'))
    )
    op.create_index(op.f('ix_batch_ingredient_usages_id'), 'batch_ingredient_usages', ['id'], unique=False)
    op.create_table('product_materials',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ingredient_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity_grams', sa.NUMERIC(precision=10, scale=3), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['ingredient_id'], ['ingredients.id'], name=op.f('product_materials_ingredient_id_fkey')),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('product_materials_product_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('product_materials_pkey')),
    sa.UniqueConstraint('product_id', 'ingredient_id', name=op.f('uq_product_material_ingredient'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_product_materials_id'), 'product_materials', ['id'], unique=False)
    op.create_table('product_shipping_tasks',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('standard_task_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('time_minutes', sa.NUMERIC(precision=10, scale=1), autoincrement=False, nullable=False),
    sa.Column('items_processed_in_task', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], name=op.f('product_shipping_tasks_employee_id_fkey')),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name=op.f('product_shipping_tasks_product_id_fkey')),
    sa.ForeignKeyConstraint(['standard_task_id'], ['standard_shipping_tasks.id'], name=op.f('product_shipping_tasks_standard_task_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('product_shipping_tasks_pkey'))
    )
    op.create_index(op.f('ix_product_shipping_tasks_id'), 'product_shipping_tasks', ['id'], unique=False)
    # ### end Alembic commands ###
